# -*- coding: utf-8 -*-
"""KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BJuU7dAT5fuBAglGqFfz6lyP_ZdYMuVO
"""

import pandas as pd
import numpy as np
from collections import Counter ## for extracting majority label class 
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
# from matplotlib.colors import ListedColormap ## color mapping module

def eucli_dist(x,y):
 return np.sqrt(np.sum((x-y)**2))

class KNN:

 def __init__(self,Kneigh=3):
  self.k=Kneigh
 
 def fit(self,xdata,ylabel):
  self.X_train=xdata
  self.Y_train=ylabel

 def predict(self,Xdata):
  y_predict=[self.predicttool(x) for x in Xdata]
  return np.array(y_predict)
 
 def predicttool(self,val):
  distances=[eucli_dist(val,x_train) for x_train in self.X_train] ### computing euclidean distances
  kindex=np.argsort(distances)[:self.k] ### sorting the diatnces and taking the index the of first k neighbours
  k_neigh_labels=[self.Y_train[i] for i in kindex] # storing labels first k neighbour training samples
  majority= Counter(k_neigh_labels).most_common(1)
  return majority[0][0]

def accuracy(y_true, y_pred):
 accuracy = np.sum(y_true == y_pred) / len(y_true)
 return accuracy

if __name__=="__main__":
 print("Machine Learning -- K Nearest Neighbours")
 full_data=pd.read_csv('/content/IRIS.csv')
 print(full_data.head(10))

 Xdata=full_data.to_numpy()
 Xdata = Xdata[:,1:4]

 Ydata=full_data.to_numpy()
 Ydata = Ydata[:,4]

 X_train, X_test, Y_train, Y_test = train_test_split(Xdata, Ydata, test_size=0.2, random_state=60)

 ### creating classifiers
 krange= range(3,50,2)
 score=[]
 for i in krange:
   clf=KNN(Kneigh=i)
   clf.fit(X_train,Y_train)
   predictions = clf.predict(X_test)
   score.append(accuracy(Y_test, predictions))

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
plt.plot(krange, score)
plt.xlabel('Value of K for KNN')
plt.ylabel('Testing Accuracy')
print(max(score))

